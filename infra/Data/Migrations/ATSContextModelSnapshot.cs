// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using infra.Data;

namespace infra.Data.Migrations
{
    [DbContext(typeof(ATSContext))]
    partial class ATSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("core.Entities.Admin.AgencySpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("AgencySpecialties");
                });

            modelBuilder.Entity("core.Entities.Admin.ContactResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EnumNo")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonType")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "PersonType")
                        .IsUnique()
                        .HasFilter("[PersonType] IS NOT NULL");

                    b.ToTable("ContactResults");
                });

            modelBuilder.Entity("core.Entities.Admin.CustomerReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CurrentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerReviews");
                });

            modelBuilder.Entity("core.Entities.Admin.CustomerReviewData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CustomerReviewStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerReviewDatas");
                });

            modelBuilder.Entity("core.Entities.Admin.CustomerReviewItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<bool>("ApprovedBySup")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerReviewDataId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewTransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReviewId");

                    b.ToTable("CustomerReviewItems");
                });

            modelBuilder.Entity("core.Entities.Admin.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AadharNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastWorkingDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("core.Entities.Admin.EmployeeHRSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "CategoryId", "IndustryId")
                        .IsUnique();

                    b.ToTable("EmployeeHRSkills");
                });

            modelBuilder.Entity("core.Entities.Admin.EmployeeOtherSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("SkillDataId")
                        .HasColumnType("int");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "SkillDataId")
                        .IsUnique();

                    b.ToTable("EmployeeOtherSkills");
                });

            modelBuilder.Entity("core.Entities.Admin.EmployeeQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("QualificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "QualificationId")
                        .IsUnique();

                    b.ToTable("EmployeeQualifications");
                });

            modelBuilder.Entity("core.Entities.Admin.UserHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("EmailId")
                        .IsUnique()
                        .HasFilter("[EmailId] IS NOT NULL");

                    b.HasIndex("PersonType");

                    b.HasIndex("PhoneNo")
                        .IsUnique()
                        .HasFilter("PhoneNo != ''");

                    b.ToTable("UserHistories");
                });

            modelBuilder.Entity("core.Entities.Admin.UserHistoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactResultId")
                        .HasColumnType("int");

                    b.Property<string>("ContactResultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfContact")
                        .HasColumnType("datetime2");

                    b.Property<string>("GistOfDiscussions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoggedInUserId")
                        .HasColumnType("int");

                    b.Property<string>("LoggedInUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PersonType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserHistoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserHistoryId");

                    b.ToTable("UserHistoryItems");
                });

            modelBuilder.Entity("core.Entities.Attachments.FileOnFileSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FilesOnFileSystem");
                });

            modelBuilder.Entity("core.Entities.Attachments.FileUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadedLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UploadedbyUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FileUploads");
                });

            modelBuilder.Entity("core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Add")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Add2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CustomerStatus")
                        .HasColumnType("int");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerName", "City")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("core.Entities.CustomerIndustry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "IndustryId")
                        .IsUnique();

                    b.ToTable("CustomerIndustries");
                });

            modelBuilder.Entity("core.Entities.CustomerOfficial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Divn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<bool>("LogInCredential")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.ToTable("CustomerOfficials");
                });

            modelBuilder.Entity("core.Entities.EmailandSMS.EmailMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BccEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CcEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateReadOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MessageSentOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PostAction")
                        .HasColumnType("int");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RecipientEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SenderEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailMessages");
                });

            modelBuilder.Entity("core.Entities.EmailandSMS.MessageComposeSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("LineText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MessageComposeSources");
                });

            modelBuilder.Entity("core.Entities.EmailandSMS.MessageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageTypes");
                });

            modelBuilder.Entity("core.Entities.EmailandSMS.PhoneMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAdvised")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfAdvise")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficialAdvised")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("TextAdvised")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.HasKey("Id");

                    b.ToTable("PhoneMessages");
                });

            modelBuilder.Entity("core.Entities.EmailandSMS.SMSMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DeliveryResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SMSDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SMSText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SMSMessages");
                });

            modelBuilder.Entity("core.Entities.HR.AssessmentStandardQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AssessmentParameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<int>("QNo")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QNo")
                        .IsUnique();

                    b.HasIndex("Question")
                        .IsUnique();

                    b.ToTable("AssessmentStandardQs");
                });

            modelBuilder.Entity("core.Entities.HR.CVRef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<int>("CVReviewId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeployStageDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeployStageId")
                        .HasColumnType("int");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("bit");

                    b.Property<int>("HRExecId")
                        .HasColumnType("int");

                    b.Property<int?>("NextStageId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("RefStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReferredOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeployStageId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("CandidateId", "OrderItemId")
                        .IsUnique();

                    b.ToTable("CVRefs");
                });

            modelBuilder.Entity("core.Entities.HR.CVRefRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestrictedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RestrictedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RestrictionLifted")
                        .HasColumnType("bit");

                    b.Property<int>("RestrictionLiftedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RestrictionLiftedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("restrictionReason")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CVRefRestrictions");
                });

            modelBuilder.Entity("core.Entities.HR.CVRvw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CVRefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CVReferredOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<int?>("ChecklistHRId")
                        .HasColumnType("int");

                    b.Property<int>("DocControllerAdminEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("DocControllerAdminTaskId")
                        .HasColumnType("int");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("bit");

                    b.Property<string>("HRExecRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HRExecTaskId")
                        .HasColumnType("int");

                    b.Property<int>("HRExecutiveId")
                        .HasColumnType("int");

                    b.Property<int?>("HRMId")
                        .HasColumnType("int");

                    b.Property<string>("HRMRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HRMReviewResultId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HRMReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HRMTaskId")
                        .HasColumnType("int");

                    b.Property<int>("HRSupId")
                        .HasColumnType("int");

                    b.Property<bool>("NoReviewBySupervisor")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewedBySupOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmittedByHRExecOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupReviewResultId")
                        .HasColumnType("int");

                    b.Property<int?>("SupTaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId", "OrderItemId")
                        .IsUnique();

                    b.ToTable("CVReviews");
                });

            modelBuilder.Entity("core.Entities.HR.CandidateAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AssessResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssessedById")
                        .HasColumnType("int");

                    b.Property<string>("AssessedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AssessedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int>("CvRefId")
                        .HasColumnType("int");

                    b.Property<int>("HrChecklistId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskIdDocControllerAdmin")
                        .HasColumnType("int");

                    b.Property<bool>("requireInternalReview")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("CandidateId", "OrderItemId")
                        .IsUnique();

                    b.ToTable("CandidateAssessments");
                });

            modelBuilder.Entity("core.Entities.HR.CandidateAssessmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Assessed")
                        .HasColumnType("bit");

                    b.Property<string>("AssessmentParameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CandidateAssessmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateAssessmentId");

                    b.ToTable("CandidateAssessmentItems");
                });

            modelBuilder.Entity("core.Entities.HR.ChecklistHR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<int>("ChargesAgreed")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ChecklistedOk")
                        .HasColumnType("bit");

                    b.Property<bool>("ExceptionApproved")
                        .HasColumnType("bit");

                    b.Property<string>("ExceptionApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExceptionApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("HrExecComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("CandidateId", "OrderItemId")
                        .IsUnique();

                    b.ToTable("ChecklistHRs");
                });

            modelBuilder.Entity("core.Entities.HR.ChecklistHRItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Accepts")
                        .HasColumnType("bit");

                    b.Property<int>("ChecklistHRId")
                        .HasColumnType("int");

                    b.Property<string>("Exceptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MandatoryTrue")
                        .HasColumnType("bit");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistHRId");

                    b.ToTable("ChecklistHRItems");
                });

            modelBuilder.Entity("core.Entities.HR.Employment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<int>("CVRefId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractPeriodInMonths")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodAllowance")
                        .HasColumnType("int");

                    b.Property<bool>("FoodProvidedFree")
                        .HasColumnType("bit");

                    b.Property<int>("HousingAllowance")
                        .HasColumnType("int");

                    b.Property<bool>("HousingProvidedFree")
                        .HasColumnType("bit");

                    b.Property<int>("LeaveAirfareEntitlementAfterMonths")
                        .HasColumnType("int");

                    b.Property<int>("LeavePerYearInDays")
                        .HasColumnType("int");

                    b.Property<string>("OfferAcceptanceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OfferAcceptedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfferAttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int>("OtherAllowance")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SelectedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SelectionDecisionId")
                        .HasColumnType("int");

                    b.Property<int>("TransportAllowance")
                        .HasColumnType("int");

                    b.Property<bool>("TransportProvidedFree")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CVRefId")
                        .IsUnique();

                    b.HasIndex("SelectionDecisionId")
                        .IsUnique();

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("core.Entities.HR.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcludingRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerRepresentative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InterviewDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InterviewDateUpto")
                        .HasColumnType("datetime2");

                    b.Property<int>("InterviewLeaderId")
                        .HasColumnType("int");

                    b.Property<string>("InterviewMode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InterviewStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterviewVenue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InterviewerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("core.Entities.HR.InterviewAttendanceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("InterviewAttendancesStatus");
                });

            modelBuilder.Entity("core.Entities.HR.InterviewItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ConcludingRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InterviewDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InterviewDateUpto")
                        .HasColumnType("datetime2");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<string>("InterviewMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterviewerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("InterviewItems");
                });

            modelBuilder.Entity("core.Entities.HR.InterviewItemCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<int?>("AttendanceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcludingRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InterviewItemId")
                        .HasColumnType("int");

                    b.Property<string>("InterviewMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InterviewedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReportedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledUpto")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SelectionStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationNo");

                    b.HasIndex("InterviewItemId");

                    b.HasIndex("CandidateId", "InterviewItemId")
                        .IsUnique();

                    b.ToTable("InterviewItemCandidates");
                });

            modelBuilder.Entity("core.Entities.HR.InterviewItemCandidateFollowup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AttendanceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ContactedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContactedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FollowupConcluded")
                        .HasColumnType("bit");

                    b.Property<int>("InterviewItemCandidateId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNoCalled")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("InterviewItemCandidateId");

                    b.ToTable("InterviewItemCandidatesFollowup");
                });

            modelBuilder.Entity("core.Entities.HR.ProspectiveCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Age")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AlternateEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternatePhoneNo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CandidateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryRef")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ctc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Natioality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ResumeId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ResumeTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId", "Source")
                        .IsUnique();

                    b.ToTable("ProspectiveCandidates");
                });

            modelBuilder.Entity("core.Entities.HR.SelectionDecision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<int>("CVRefId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SelectedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SelectionStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CVRefId")
                        .IsUnique();

                    b.ToTable("SelectionDecisions");
                });

            modelBuilder.Entity("core.Entities.HR.SelectionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DecisionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SelectionStatuses");
                });

            modelBuilder.Entity("core.Entities.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRole");
                });

            modelBuilder.Entity("core.Entities.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KnownAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("loggedInEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("core.Entities.Identity.AppUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("RoleId", "UserId")
                        .IsUnique();

                    b.ToTable("AppUserRole");
                });

            modelBuilder.Entity("core.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.AssessmentQBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.ToTable("AssessmentQBank");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.AssessmentQBankItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AssessmentParameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssessmentQBankId")
                        .HasColumnType("int");

                    b.Property<bool>("IsStandardQ")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<int>("QNo")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentQBankId", "QNo")
                        .IsUnique();

                    b.ToTable("AssessmentQBankItems");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.ChecklistHRData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Parameter")
                        .IsUnique();

                    b.HasIndex("SrNo")
                        .IsUnique();

                    b.ToTable("ChecklistHRDatas");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.DeployStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("NextDeployStageSequence")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("DeployStage");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.ReviewItemData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsMandatoryTrue")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResponseBoolean")
                        .HasColumnType("bit");

                    b.Property<bool>("Response")
                        .HasColumnType("bit");

                    b.Property<string>("ReviewParameter")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SrNo")
                        .IsUnique();

                    b.ToTable("ReviewItemDatas");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.ReviewItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ItemStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ItemStatus")
                        .IsUnique();

                    b.ToTable("ReviewItemStatuses");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.ReviewStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ReviewStatuses");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.SkillData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SkillName")
                        .IsUnique();

                    b.ToTable("SkillDatas");
                });

            modelBuilder.Entity("core.Entities.Messages.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("core.Entities.Messages.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("core.Entities.Orders.ContractReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<bool>("ReleasedForProduction")
                        .HasColumnType("bit");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RvwStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.ToTable("ContractReviews");
                });

            modelBuilder.Entity("core.Entities.Orders.ContractReviewItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractReviewId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("RequireAssess")
                        .HasColumnType("bit");

                    b.Property<int>("ReviewItemStatus")
                        .HasColumnType("int");

                    b.Property<string>("SourceFrom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractReviewId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("ContractReviewItems");
                });

            modelBuilder.Entity("core.Entities.Orders.DLForward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryRefAndName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerOfficialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOnlyForwarded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeForwarded")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailIdForwardedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoggedInAppUserId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNoForwardedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsAppNoForwardedTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId", "CustomerOfficialId", "DateOnlyForwarded")
                        .IsUnique();

                    b.ToTable("DLForwards");
                });

            modelBuilder.Entity("core.Entities.Orders.JobDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ExpDesiredMax")
                        .HasColumnType("int");

                    b.Property<int>("ExpDesiredMin")
                        .HasColumnType("int");

                    b.Property<string>("JobDescInBrief")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemId1")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("QualificationDesired")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId1");

                    b.ToTable("JobDescriptions");
                });

            modelBuilder.Entity("core.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BuyerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityOfWorking")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompleteBy")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContractReviewId")
                        .HasColumnType("int");

                    b.Property<int>("ContractReviewStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmigProcessInchargeId")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedRevenue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ForwardedToHRDeptOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MedicalProcessInchargeEmpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("OrderRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderRefDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesmanId")
                        .HasColumnType("int");

                    b.Property<string>("SalesmanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TravelProcessInchargeId")
                        .HasColumnType("int");

                    b.Property<int?>("VisaProcessInchargeEmpId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AssignedId")
                        .HasColumnType("int");

                    b.Property<string>("AssignedToName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CompleteBefore")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("bit");

                    b.Property<int>("FeeFromClientINR")
                        .HasColumnType("int");

                    b.Property<string>("HRExecName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HrExecId")
                        .HasColumnType("int");

                    b.Property<int?>("HrSupId")
                        .HasColumnType("int");

                    b.Property<string>("HrSupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HrmId")
                        .HasColumnType("int");

                    b.Property<string>("HrmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("IndustryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProcessingOnly")
                        .HasColumnType("bit");

                    b.Property<int?>("JobDescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("MaxCVs")
                        .HasColumnType("int");

                    b.Property<int>("MinCVs")
                        .HasColumnType("int");

                    b.Property<bool>("NoReviewBySupervisor")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RemunerationId")
                        .HasColumnType("int");

                    b.Property<bool>("RequireAssess")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireInternalReview")
                        .HasColumnType("bit");

                    b.Property<int>("ReviewItemStatusId")
                        .HasColumnType("int");

                    b.Property<string>("SourceFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("JobDescriptionId")
                        .IsUnique()
                        .HasFilter("[JobDescriptionId] IS NOT NULL");

                    b.HasIndex("OrderId");

                    b.HasIndex("RemunerationId")
                        .IsUnique()
                        .HasFilter("[RemunerationId] IS NOT NULL");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItemAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderAssessmentId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderItemAssessments");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItemAssessmentQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int>("MaxMarks")
                        .HasColumnType("int");

                    b.Property<int>("OrderAssessmentItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemAssessmentId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemAssessmentId");

                    b.ToTable("OrderItemAssessmentQs");
                });

            modelBuilder.Entity("core.Entities.Orders.Remuneration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ContractPeriodInMonths")
                        .HasColumnType("int");

                    b.Property<int>("FoodAllowance")
                        .HasColumnType("int");

                    b.Property<bool>("FoodNotProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("FoodProvidedFree")
                        .HasColumnType("bit");

                    b.Property<int>("HousingAllowance")
                        .HasColumnType("int");

                    b.Property<bool>("HousingNotProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("HousingProvidedFree")
                        .HasColumnType("bit");

                    b.Property<int>("LeaveAirfareEntitlementAfterMonths")
                        .HasColumnType("int");

                    b.Property<int>("LeavePerYearInDays")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemId1")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int>("OtherAllowance")
                        .HasColumnType("int");

                    b.Property<string>("SalaryCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("SalaryMax")
                        .HasColumnType("int");

                    b.Property<int>("SalaryMin")
                        .HasColumnType("int");

                    b.Property<int>("TransportAllowance")
                        .HasColumnType("int");

                    b.Property<bool>("TransportNotProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("TransportProvidedFree")
                        .HasColumnType("bit");

                    b.Property<int>("WorkHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId1");

                    b.ToTable("Remunerations");
                });

            modelBuilder.Entity("core.Entities.Orders.ReviewItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ContractReviewItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatoryTrue")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResponseBoolean")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Response")
                        .HasColumnType("bit");

                    b.Property<string>("ResponseText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewParameter")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractReviewItemId", "ReviewParameter")
                        .IsUnique();

                    b.HasIndex("ContractReviewItemId", "SrNo")
                        .IsUnique();

                    b.ToTable("ReviewItems");
                });

            modelBuilder.Entity("core.Entities.Process.Deploy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CVRefId")
                        .HasColumnType("int");

                    b.Property<int?>("CVRefId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextEstimatedStageDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NextStageId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CVRefId");

                    b.HasIndex("CVRefId1");

                    b.ToTable("Deploys");
                });

            modelBuilder.Entity("core.Entities.Process.DeployStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("NextStageId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WorkingDaysReqdForNextStage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusName")
                        .IsUnique();

                    b.ToTable("DeployStatus");
                });

            modelBuilder.Entity("core.Entities.Tasks.ApplicationTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<int>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<string>("AssignedToName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CVReviewId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CompleteBy")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("HistoryItemId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("PersonType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostTaskAction")
                        .HasColumnType("int");

                    b.Property<DateTime>("TaskDate")
                        .HasMaxLength(250)
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("TaskOwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("TaskOwnerId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("AssignedToId", "OrderItemId", "CandidateId", "TaskTypeId")
                        .IsUnique()
                        .HasFilter("CandidateId > 0");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("core.Entities.Tasks.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationTaskId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("NextFollowupById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextFollowupOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TaskItemDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TaskTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTaskId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("UserId")
                        .HasFilter("[UserId] > 0");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("core.Entities.Tasks.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("core.Entities.Users.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AadharNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<bool>("AppUserIdNotEnforced")
                        .HasColumnType("bit");

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateStatus")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR(75)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR(75)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotificationDesired")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PpNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferredBy")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR(75)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationNo")
                        .IsUnique()
                        .HasFilter("[ApplicationNo] > 0");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("core.Entities.Users.EmployeeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Add")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAdd")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAddresses");
                });

            modelBuilder.Entity("core.Entities.Users.EmployeePhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOfficial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePhones");
                });

            modelBuilder.Entity("core.Entities.Users.EntityAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Add")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("AddressType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAdd")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("EntityAddresses");
                });

            modelBuilder.Entity("core.Entities.Users.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("core.Entities.Users.UserAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<long>("AttachmentSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("AttachmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<int>("UploadedByEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserAttachments");
                });

            modelBuilder.Entity("core.Entities.Users.UserExp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MonthlySalaryDrawn")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkedUpto")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserExps");
                });

            modelBuilder.Entity("core.Entities.Users.UserPassport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .HasFilter("[IsValid]=1");

                    b.HasIndex("PassportNo")
                        .IsUnique();

                    b.ToTable("UserPassports");
                });

            modelBuilder.Entity("core.Entities.Users.UserPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("core.Entities.Users.UserProfession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .HasFilter("[IsMain]=1");

                    b.HasIndex("CandidateId", "CategoryId", "IndustryId")
                        .IsUnique();

                    b.ToTable("UserProfessions");
                });

            modelBuilder.Entity("core.Entities.Users.UserQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("QualificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .HasFilter("[IsMain]=1");

                    b.HasIndex("CandidateId", "QualificationId")
                        .IsUnique();

                    b.ToTable("UserQualifications");
                });

            modelBuilder.Entity("core.ParamsAndDtos.CVsRefCountDto", b =>
                {
                    b.Property<int>("Ct")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("OrderItemId");

                    b.ToView("ats_CVsSubmitted");
                });

            modelBuilder.Entity("core.Entities.Admin.AgencySpecialty", b =>
                {
                    b.HasOne("core.Entities.Customer", null)
                        .WithMany("AgencySpecialties")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Admin.CustomerReviewItem", b =>
                {
                    b.HasOne("core.Entities.Admin.CustomerReview", null)
                        .WithMany("CustomerReviewItems")
                        .HasForeignKey("CustomerReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Admin.EmployeeHRSkill", b =>
                {
                    b.HasOne("core.Entities.Admin.Employee", null)
                        .WithMany("HrSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Admin.EmployeeOtherSkill", b =>
                {
                    b.HasOne("core.Entities.Admin.Employee", null)
                        .WithMany("OtherSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Admin.EmployeeQualification", b =>
                {
                    b.HasOne("core.Entities.Admin.Employee", null)
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Admin.UserHistoryItem", b =>
                {
                    b.HasOne("core.Entities.Admin.UserHistory", null)
                        .WithMany("UserHistoryItems")
                        .HasForeignKey("UserHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.CustomerIndustry", b =>
                {
                    b.HasOne("core.Entities.Customer", null)
                        .WithMany("CustomerIndustries")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.CustomerOfficial", b =>
                {
                    b.HasOne("core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.Customer", null)
                        .WithMany("CustomerOfficials")
                        .HasForeignKey("CustomerId1");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("core.Entities.HR.CVRef", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.MasterEntities.DeployStage", "DeployStage")
                        .WithMany()
                        .HasForeignKey("DeployStageId");

                    b.HasOne("core.Entities.Orders.OrderItem", "OrderItem")
                        .WithOne()
                        .HasForeignKey("core.Entities.HR.CVRef", "OrderItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("DeployStage");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("core.Entities.HR.CandidateAssessment", b =>
                {
                    b.HasOne("core.Entities.Orders.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("core.Entities.HR.CandidateAssessmentItem", b =>
                {
                    b.HasOne("core.Entities.HR.CandidateAssessment", null)
                        .WithMany("CandidateAssessmentItems")
                        .HasForeignKey("CandidateAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.HR.ChecklistHR", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.Orders.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("core.Entities.HR.ChecklistHRItem", b =>
                {
                    b.HasOne("core.Entities.HR.ChecklistHR", null)
                        .WithMany("ChecklistHRItems")
                        .HasForeignKey("ChecklistHRId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.HR.Employment", b =>
                {
                    b.HasOne("core.Entities.HR.SelectionDecision", null)
                        .WithOne("Employment")
                        .HasForeignKey("core.Entities.HR.Employment", "SelectionDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.HR.InterviewItem", b =>
                {
                    b.HasOne("core.Entities.HR.Interview", null)
                        .WithMany("InterviewItems")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.HR.InterviewItemCandidate", b =>
                {
                    b.HasOne("core.Entities.HR.InterviewItem", null)
                        .WithMany("InterviewItemCandidates")
                        .HasForeignKey("InterviewItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.HR.InterviewItemCandidateFollowup", b =>
                {
                    b.HasOne("core.Entities.HR.InterviewItemCandidate", null)
                        .WithMany("InterviewFollowups")
                        .HasForeignKey("InterviewItemCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.HR.SelectionDecision", b =>
                {
                    b.HasOne("core.Entities.HR.CVRef", "CVRef")
                        .WithOne()
                        .HasForeignKey("core.Entities.HR.SelectionDecision", "CVRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CVRef");
                });

            modelBuilder.Entity("core.Entities.Identity.AppUserRole", b =>
                {
                    b.HasOne("core.Entities.Identity.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.Identity.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.AssessmentQBankItem", b =>
                {
                    b.HasOne("core.Entities.MasterEntities.AssessmentQBank", null)
                        .WithMany("AssessmentQBankItems")
                        .HasForeignKey("AssessmentQBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Messages.Connection", b =>
                {
                    b.HasOne("core.Entities.Messages.Group", null)
                        .WithMany("Connections")
                        .HasForeignKey("GroupName");
                });

            modelBuilder.Entity("core.Entities.Orders.ContractReviewItem", b =>
                {
                    b.HasOne("core.Entities.Orders.ContractReview", null)
                        .WithMany("ContractReviewItems")
                        .HasForeignKey("ContractReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.Orders.OrderItem", null)
                        .WithOne("ContractReviewItem")
                        .HasForeignKey("core.Entities.Orders.ContractReviewItem", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Orders.JobDescription", b =>
                {
                    b.HasOne("core.Entities.Orders.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId1");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("core.Entities.Orders.Order", b =>
                {
                    b.HasOne("core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItem", b =>
                {
                    b.HasOne("core.Entities.Admin.Employee", "Assigned")
                        .WithMany()
                        .HasForeignKey("AssignedId");

                    b.HasOne("core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.Orders.JobDescription", "JobDescription")
                        .WithOne()
                        .HasForeignKey("core.Entities.Orders.OrderItem", "JobDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("core.Entities.Orders.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.Orders.Remuneration", "Remuneration")
                        .WithOne()
                        .HasForeignKey("core.Entities.Orders.OrderItem", "RemunerationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Assigned");

                    b.Navigation("Category");

                    b.Navigation("JobDescription");

                    b.Navigation("Remuneration");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItemAssessmentQ", b =>
                {
                    b.HasOne("core.Entities.Orders.OrderItemAssessment", null)
                        .WithMany("OrderItemAssessmentQs")
                        .HasForeignKey("OrderItemAssessmentId");
                });

            modelBuilder.Entity("core.Entities.Orders.Remuneration", b =>
                {
                    b.HasOne("core.Entities.Orders.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId1");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("core.Entities.Orders.ReviewItem", b =>
                {
                    b.HasOne("core.Entities.Orders.ContractReviewItem", null)
                        .WithMany("ReviewItems")
                        .HasForeignKey("ContractReviewItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Process.Deploy", b =>
                {
                    b.HasOne("core.Entities.HR.CVRef", "CVRef")
                        .WithMany()
                        .HasForeignKey("CVRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("core.Entities.HR.CVRef", null)
                        .WithMany("Deploys")
                        .HasForeignKey("CVRefId1");

                    b.Navigation("CVRef");
                });

            modelBuilder.Entity("core.Entities.Tasks.TaskItem", b =>
                {
                    b.HasOne("core.Entities.Tasks.ApplicationTask", null)
                        .WithMany("TaskItems")
                        .HasForeignKey("ApplicationTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.EmployeeAddress", b =>
                {
                    b.HasOne("core.Entities.Admin.Employee", null)
                        .WithMany("EmployeeAddresses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.EmployeePhone", b =>
                {
                    b.HasOne("core.Entities.Admin.Employee", null)
                        .WithMany("EmployeePhones")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.EntityAddress", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("EntityAddresses")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.Photo", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserPhotos")
                        .HasForeignKey("CandidateId");
                });

            modelBuilder.Entity("core.Entities.Users.UserAttachment", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserAttachments")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.UserExp", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserExperiences")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.UserPassport", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserPassports")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.UserPhone", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserPhones")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.UserProfession", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserProfessions")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.UserQualification", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserQualifications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Admin.CustomerReview", b =>
                {
                    b.Navigation("CustomerReviewItems");
                });

            modelBuilder.Entity("core.Entities.Admin.Employee", b =>
                {
                    b.Navigation("EmployeeAddresses");

                    b.Navigation("EmployeePhones");

                    b.Navigation("EmployeeQualifications");

                    b.Navigation("HrSkills");

                    b.Navigation("OtherSkills");
                });

            modelBuilder.Entity("core.Entities.Admin.UserHistory", b =>
                {
                    b.Navigation("UserHistoryItems");
                });

            modelBuilder.Entity("core.Entities.Customer", b =>
                {
                    b.Navigation("AgencySpecialties");

                    b.Navigation("CustomerIndustries");

                    b.Navigation("CustomerOfficials");
                });

            modelBuilder.Entity("core.Entities.HR.CVRef", b =>
                {
                    b.Navigation("Deploys");
                });

            modelBuilder.Entity("core.Entities.HR.CandidateAssessment", b =>
                {
                    b.Navigation("CandidateAssessmentItems");
                });

            modelBuilder.Entity("core.Entities.HR.ChecklistHR", b =>
                {
                    b.Navigation("ChecklistHRItems");
                });

            modelBuilder.Entity("core.Entities.HR.Interview", b =>
                {
                    b.Navigation("InterviewItems");
                });

            modelBuilder.Entity("core.Entities.HR.InterviewItem", b =>
                {
                    b.Navigation("InterviewItemCandidates");
                });

            modelBuilder.Entity("core.Entities.HR.InterviewItemCandidate", b =>
                {
                    b.Navigation("InterviewFollowups");
                });

            modelBuilder.Entity("core.Entities.HR.SelectionDecision", b =>
                {
                    b.Navigation("Employment");
                });

            modelBuilder.Entity("core.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("core.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.AssessmentQBank", b =>
                {
                    b.Navigation("AssessmentQBankItems");
                });

            modelBuilder.Entity("core.Entities.Messages.Group", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("core.Entities.Orders.ContractReview", b =>
                {
                    b.Navigation("ContractReviewItems");
                });

            modelBuilder.Entity("core.Entities.Orders.ContractReviewItem", b =>
                {
                    b.Navigation("ReviewItems");
                });

            modelBuilder.Entity("core.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItem", b =>
                {
                    b.Navigation("ContractReviewItem");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItemAssessment", b =>
                {
                    b.Navigation("OrderItemAssessmentQs");
                });

            modelBuilder.Entity("core.Entities.Tasks.ApplicationTask", b =>
                {
                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("core.Entities.Users.Candidate", b =>
                {
                    b.Navigation("EntityAddresses");

                    b.Navigation("UserAttachments");

                    b.Navigation("UserExperiences");

                    b.Navigation("UserPassports");

                    b.Navigation("UserPhones");

                    b.Navigation("UserPhotos");

                    b.Navigation("UserProfessions");

                    b.Navigation("UserQualifications");
                });
#pragma warning restore 612, 618
        }
    }
}
