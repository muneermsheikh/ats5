// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using infra.Data;

namespace infra.Data.Migrations
{
    [DbContext(typeof(ATSContext))]
    [Migration("20210727163334_CVRefNavigationsAdded")]
    partial class CVRefNavigationsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("core.Entities.Admin.AgencySpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndustryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("AgencySpecialties");
                });

            modelBuilder.Entity("core.Entities.Admin.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AadharNo")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("Add")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DOJ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastWorkingDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("core.Entities.Admin.EmployeeHRSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndustryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "CategoryId", "IndustryId")
                        .IsUnique();

                    b.ToTable("EmployeeHRSkills");
                });

            modelBuilder.Entity("core.Entities.Admin.EmployeeOtherSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillDataId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "SkillDataId")
                        .IsUnique();

                    b.ToTable("EmployeeOtherSkills");
                });

            modelBuilder.Entity("core.Entities.Admin.EmployeeQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QualificationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "QualificationId")
                        .IsUnique();

                    b.ToTable("EmployeeQualifications");
                });

            modelBuilder.Entity("core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Add")
                        .HasColumnType("TEXT");

                    b.Property<string>("Add2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pin")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerName", "City")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("core.Entities.CustomerIndustry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndustryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "IndustryId")
                        .IsUnique();

                    b.ToTable("CustomerIndustries");
                });

            modelBuilder.Entity("core.Entities.CustomerOfficial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Designation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LogInCredential")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mobile")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOfficials");
                });

            modelBuilder.Entity("core.Entities.HR.CVRef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Charges")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeployStageDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeployStageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReferredOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeployStageId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("CandidateId", "OrderItemId")
                        .IsUnique();

                    b.ToTable("CVRefs");
                });

            modelBuilder.Entity("core.Entities.HR.CVRefRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int>("RestrictedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RestrictedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RestrictionLifted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestrictionLiftedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RestrictionLiftedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("restrictionReason")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CVRefRestrictions");
                });

            modelBuilder.Entity("core.Entities.HR.CandidateAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessResult")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AssessedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssessedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("CandidateId", "OrderItemId")
                        .IsUnique();

                    b.ToTable("CandidateAssessments");
                });

            modelBuilder.Entity("core.Entities.HR.CandidateAssessmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Assessed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessmentParameter")
                        .HasColumnType("TEXT");

                    b.Property<int>("CandidateAssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateAssessmentId");

                    b.ToTable("CandidateAssessmentItems");
                });

            modelBuilder.Entity("core.Entities.HR.ChecklistHR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CheckedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("CandidateId", "OrderItemId")
                        .IsUnique();

                    b.ToTable("ChecklistHRs");
                });

            modelBuilder.Entity("core.Entities.HR.ChecklistItemHR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Accepts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChecklistHRId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exceptions")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MandatoryTrue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Response")
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistHRId");

                    b.ToTable("CheckListItemHRs");
                });

            modelBuilder.Entity("core.Entities.Identity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Add")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressType")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pin")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondName")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAdd")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("core.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("core.Entities.Identity.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecipientId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SenderId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId1");

                    b.HasIndex("SenderId1");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("core.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.AssessmentQBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessmentParameter")
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStandardQ")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AssessmentQsBank");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.ChecklistHRData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Parameter")
                        .IsUnique();

                    b.HasIndex("SrNo")
                        .IsUnique();

                    b.ToTable("ChecklistHRDatas");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.DeployStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NextDeployStageSequence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("DeployStages");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.ReviewItemData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SrNo")
                        .IsUnique();

                    b.ToTable("ReviewItemDatas");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.ReviewItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemStatus")
                        .IsUnique();

                    b.ToTable("ReviewItemStatuses");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.ReviewStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ReviewStatuses");
                });

            modelBuilder.Entity("core.Entities.MasterEntities.SkillData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SkillName")
                        .IsUnique();

                    b.ToTable("SkillDatas");
                });

            modelBuilder.Entity("core.Entities.Message.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("core.Entities.Message.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("core.Entities.Orders.ContractReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReviewStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReviewedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.HasIndex("ReviewStatusId");

                    b.ToTable("ContractReviews");
                });

            modelBuilder.Entity("core.Entities.Orders.ContractReviewItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ContractReviewId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireAssess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewItemStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceFrom")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractReviewId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("ContractReviewItems");
                });

            modelBuilder.Entity("core.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuyerEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("CityOfWorking")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CompleteBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstimatedRevenue")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderRef")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SalesmanId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SalesmanName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssignedId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssignedToName")
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Charges")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CompleteBefore")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FeeFromClientINR")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HRExecName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HrExecId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HrSupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HrSupName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HrmId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HrmName")
                        .HasColumnType("TEXT");

                    b.Property<int>("IndustryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IndustryName")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxCVs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinCVs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireAssess")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReviewItemStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceFrom")
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItemAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderAssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OrderItemAssessments");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItemAssessmentQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxMarks")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderAssessmentItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderItemAssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemAssessmentId");

                    b.ToTable("OrderItemAssessmentQs");
                });

            modelBuilder.Entity("core.Entities.Process.CVDeploy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CVRefId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CVRefId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CVRefId2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeployStageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("NextDeployStageEstimatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NextDeployStageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CVRefId");

                    b.HasIndex("CVRefId1");

                    b.ToTable("CVDeploys");
                });

            modelBuilder.Entity("core.Entities.Tasks.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedToId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CompleteBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TaskDate")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskOwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("TaskOwnerId");

                    b.HasIndex("TaskType");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("core.Entities.Tasks.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NextFollowupById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NextFollowupOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TaskId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskItemDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskId1");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("UserId")
                        .HasFilter("[UserId]>0");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("core.Entities.Users.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AadharNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserIdNotEnforced")
                        .HasColumnType("TEXT");

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CVRefId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CandidateStatus")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("Interests")
                        .HasColumnType("TEXT");

                    b.Property<string>("Introduction")
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("PpNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondName")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationNo")
                        .IsUnique()
                        .HasFilter("[ApplicationNo] > 0");

                    b.HasIndex("CVRefId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("core.Entities.Users.EntityAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Add")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressType")
                        .HasColumnType("TEXT");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pin")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAdd")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("EntityAddress");
                });

            modelBuilder.Entity("core.Entities.Users.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("core.Entities.Users.UserAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("AttachmentSizeInKB")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttachmentType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentUrl")
                        .IsUnique();

                    b.HasIndex("CandidateId");

                    b.ToTable("UserAttachments");
                });

            modelBuilder.Entity("core.Entities.Users.UserExp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Employer")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MonthlySalaryDrawn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("WorkedFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WorkedUpto")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserExps");
                });

            modelBuilder.Entity("core.Entities.Users.UserPassport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("IssuedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .HasFilter("[IsValid]=1");

                    b.HasIndex("PassportNo")
                        .IsUnique();

                    b.ToTable("UserPassports");
                });

            modelBuilder.Entity("core.Entities.Users.UserPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MobileNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .HasFilter("[IsValid]=1");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PhoneNo")
                        .IsUnique();

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("core.Entities.Users.UserProfession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndustryId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .HasFilter("[IsMain]=1");

                    b.HasIndex("CandidateId", "CategoryId", "IndustryId")
                        .IsUnique();

                    b.ToTable("UserProfessions");
                });

            modelBuilder.Entity("core.Entities.Users.UserQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QualificationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .HasFilter("[IsMain]=1");

                    b.HasIndex("CandidateId", "QualificationId")
                        .IsUnique();

                    b.ToTable("UserQualifications");
                });

            modelBuilder.Entity("core.Entities.Admin.AgencySpecialty", b =>
                {
                    b.HasOne("core.Entities.Customer", "Customer")
                        .WithMany("AgencySpecialties")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("core.Entities.Admin.Employee", b =>
                {
                    b.OwnsOne("core.Entities.Admin.Person", "Person", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AadharNo")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("DOB")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Email")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FamilyName")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Gender")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("KnownAs")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Nationality")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PlaceOfBirth")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PpNo")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SecondName")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UserName")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UserType")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Person");
                });

            modelBuilder.Entity("core.Entities.Admin.EmployeeHRSkill", b =>
                {
                    b.HasOne("core.Entities.Admin.Employee", null)
                        .WithMany("HrSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Admin.EmployeeOtherSkill", b =>
                {
                    b.HasOne("core.Entities.Admin.Employee", null)
                        .WithMany("OtherSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Admin.EmployeeQualification", b =>
                {
                    b.HasOne("core.Entities.Admin.Employee", null)
                        .WithMany("Qualifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.CustomerIndustry", b =>
                {
                    b.HasOne("core.Entities.Customer", null)
                        .WithMany("CustomerIndustries")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.CustomerOfficial", b =>
                {
                    b.HasOne("core.Entities.Customer", null)
                        .WithMany("CustomerOfficials")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.HR.CVRef", b =>
                {
                    b.HasOne("core.Entities.MasterEntities.DeployStage", "DeployStage")
                        .WithMany()
                        .HasForeignKey("DeployStageId");

                    b.HasOne("core.Entities.Orders.OrderItem", null)
                        .WithMany("CVRefs")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeployStage");
                });

            modelBuilder.Entity("core.Entities.HR.CandidateAssessment", b =>
                {
                    b.HasOne("core.Entities.Orders.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("core.Entities.HR.CandidateAssessmentItem", b =>
                {
                    b.HasOne("core.Entities.HR.CandidateAssessment", null)
                        .WithMany("CandidateAssessmentItems")
                        .HasForeignKey("CandidateAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.HR.ChecklistHR", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.Orders.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("core.Entities.HR.ChecklistItemHR", b =>
                {
                    b.HasOne("core.Entities.HR.ChecklistHR", null)
                        .WithMany("ChecklistItemHRs")
                        .HasForeignKey("ChecklistHRId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Identity.Address", b =>
                {
                    b.HasOne("core.Entities.Identity.AppUser", "AppUser")
                        .WithOne("Address")
                        .HasForeignKey("core.Entities.Identity.Address", "AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("core.Entities.Identity.Message", b =>
                {
                    b.HasOne("core.Entities.Identity.AppUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId1");

                    b.HasOne("core.Entities.Identity.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId1");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("core.Entities.Message.Connection", b =>
                {
                    b.HasOne("core.Entities.Message.Group", null)
                        .WithMany("Connections")
                        .HasForeignKey("GroupName");
                });

            modelBuilder.Entity("core.Entities.Orders.ContractReview", b =>
                {
                    b.HasOne("core.Entities.MasterEntities.ReviewStatus", "ReviewStatus")
                        .WithMany()
                        .HasForeignKey("ReviewStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewStatus");
                });

            modelBuilder.Entity("core.Entities.Orders.ContractReviewItem", b =>
                {
                    b.HasOne("core.Entities.Orders.ContractReview", null)
                        .WithMany("ContractReviewItems")
                        .HasForeignKey("ContractReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("core.Entities.Orders.OrderItem", "OrderItem")
                        .WithOne("ContractReviewItem")
                        .HasForeignKey("core.Entities.Orders.ContractReviewItem", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("core.Entities.Orders.Order", b =>
                {
                    b.HasOne("core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("core.Entities.Orders.OrderAddress", "OrderAddress", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Add")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("CompanyName")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("District")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Location")
                                .HasColumnType("TEXT");

                            b1.Property<int?>("OrderId1")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Pin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("State")
                                .HasColumnType("TEXT");

                            b1.Property<string>("StreetAdd")
                                .HasColumnType("TEXT");

                            b1.HasKey("OrderId");

                            b1.HasIndex("OrderId1");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.HasOne("core.Entities.Orders.Order", "Order")
                                .WithMany()
                                .HasForeignKey("OrderId1");

                            b1.Navigation("Order");
                        });

                    b.Navigation("Customer");

                    b.Navigation("OrderAddress");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItem", b =>
                {
                    b.HasOne("core.Entities.Admin.Employee", "Assigned")
                        .WithMany()
                        .HasForeignKey("AssignedId");

                    b.HasOne("core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.Orders.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.HR.CVRef", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("core.Entities.Orders.JobDescription", "JobDescription", b1 =>
                        {
                            b1.Property<int>("OrderItemId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ExpDesiredMax")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ExpDesiredMin")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("JobDescInBrief")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("TEXT");

                            b1.Property<int>("MaxAge")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("MinAge")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("QualificationDesired")
                                .HasColumnType("TEXT");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("JobDescriptions");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.OwnsOne("core.Entities.Orders.Remuneration", "Remuneration", b1 =>
                        {
                            b1.Property<int>("OrderItemId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ContractPeriodInMonths")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("FoodAllowance")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("FoodProvidedFree")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("HousingAllowance")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("HousingProvidedFree")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("LeaveAirfareEntitlementAfterMonths")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("LeavePerYearInDays")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("OtherAllowance")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("SalaryCurrency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("TEXT");

                            b1.Property<int>("SalaryMax")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SalaryMin")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("TransportAllowance")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("TransportProvidedFree")
                                .HasColumnType("INTEGER");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("Remunerations");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.Navigation("Assigned");

                    b.Navigation("Category");

                    b.Navigation("JobDescription");

                    b.Navigation("Remuneration");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItemAssessmentQ", b =>
                {
                    b.HasOne("core.Entities.Orders.OrderItemAssessment", null)
                        .WithMany("OrderItemAssessmentQs")
                        .HasForeignKey("OrderItemAssessmentId");
                });

            modelBuilder.Entity("core.Entities.Process.CVDeploy", b =>
                {
                    b.HasOne("core.Entities.HR.CVRef", "CVRef")
                        .WithMany()
                        .HasForeignKey("CVRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.HR.CVRef", null)
                        .WithMany("Deploys")
                        .HasForeignKey("CVRefId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CVRef");
                });

            modelBuilder.Entity("core.Entities.Tasks.TaskItem", b =>
                {
                    b.HasOne("core.Entities.Tasks.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.Tasks.Task", null)
                        .WithMany("TaskItems")
                        .HasForeignKey("TaskId1");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("core.Entities.Users.Candidate", b =>
                {
                    b.HasOne("core.Entities.HR.CVRef", null)
                        .WithMany("Candidates")
                        .HasForeignKey("CVRefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("core.Entities.Users.EntityAddress", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("EntityAddresses")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.UserAttachment", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserAttachments")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.UserExp", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserExperiences")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.UserPassport", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserPassports")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.UserPhone", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserPhones")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Entities.Admin.Employee", null)
                        .WithMany("UserPhones")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("core.Entities.Users.UserProfession", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserProfessions")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Users.UserQualification", b =>
                {
                    b.HasOne("core.Entities.Users.Candidate", null)
                        .WithMany("UserQualifications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core.Entities.Admin.Employee", b =>
                {
                    b.Navigation("HrSkills");

                    b.Navigation("OtherSkills");

                    b.Navigation("Qualifications");

                    b.Navigation("UserPhones");
                });

            modelBuilder.Entity("core.Entities.Customer", b =>
                {
                    b.Navigation("AgencySpecialties");

                    b.Navigation("CustomerIndustries");

                    b.Navigation("CustomerOfficials");
                });

            modelBuilder.Entity("core.Entities.HR.CVRef", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Deploys");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("core.Entities.HR.CandidateAssessment", b =>
                {
                    b.Navigation("CandidateAssessmentItems");
                });

            modelBuilder.Entity("core.Entities.HR.ChecklistHR", b =>
                {
                    b.Navigation("ChecklistItemHRs");
                });

            modelBuilder.Entity("core.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("core.Entities.Message.Group", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("core.Entities.Orders.ContractReview", b =>
                {
                    b.Navigation("ContractReviewItems");
                });

            modelBuilder.Entity("core.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItem", b =>
                {
                    b.Navigation("ContractReviewItem");

                    b.Navigation("CVRefs");
                });

            modelBuilder.Entity("core.Entities.Orders.OrderItemAssessment", b =>
                {
                    b.Navigation("OrderItemAssessmentQs");
                });

            modelBuilder.Entity("core.Entities.Tasks.Task", b =>
                {
                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("core.Entities.Users.Candidate", b =>
                {
                    b.Navigation("EntityAddresses");

                    b.Navigation("UserAttachments");

                    b.Navigation("UserExperiences");

                    b.Navigation("UserPassports");

                    b.Navigation("UserPhones");

                    b.Navigation("UserProfessions");

                    b.Navigation("UserQualifications");
                });
#pragma warning restore 612, 618
        }
    }
}
